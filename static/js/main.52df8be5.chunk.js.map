{"version":3,"sources":["components/Header.js","components/ClimaForm.js","components/Clima.js","components/App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","title","ClimaForm","ciudadRef","React","createRef","paisRef","consultarClima","e","preventDefault","search","ciudad","_this","current","value","pais","onSubmit","this","id","type","ref","htmlFor","defaultValue","Component","Clima","mostrarResultado","_this$props$result","result","name","weather","main","urlIcon","concat","icon","temp","toFixed","src","alr","temp_max","temp_min","App","state","error","query","setState","consultarApi","url","fetch","then","response","json","data","catch","console","log","components_Header","components_ClimaForm","components_Clima","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.52df8be5.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Header = (props) => {\r\n    return (\r\n        <nav>\r\n            <div className=\"nav-wrapper light-blue darken-2\">\r\n                <span className=\"brand-logo\">{props.title}</span>\r\n            </div>    \r\n        </nav>\r\n    );\r\n};\r\n\r\nHeader.propTypes = {\r\n    title: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass ClimaForm extends Component {\r\n\r\n    ciudadRef = React.createRef();\r\n    paisRef = React.createRef();\r\n\r\n    consultarClima = (e) => {\r\n        e.preventDefault();\r\n        const ciudad = this.ciudadRef.current.value;\r\n        const pais = this.paisRef.current.value;\r\n        const search = {\r\n            ciudad,\r\n            pais\r\n        };\r\n        this.props.consultarClima(search);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"contenedor-form\">\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <form onSubmit={this.consultarClima}>\r\n                            <div className=\"input-field col s12 m8 l4 offset-m2\">\r\n                                <input id=\"ciudad\" type=\"text\" ref={this.ciudadRef}></input>\r\n                                <label htmlFor=\"ciudad\">Ciudad</label>\r\n                            </div>\r\n                            <div className=\"input-field col s12 m8 l4 offset-m2\">\r\n                                <select id=\"pais\" type=\"text\" ref={this.paisRef}>\r\n                                    <option value=\"\" defaultValue>Elige un país</option>\r\n                                    <option value=\"AR\">Argentina</option>\r\n                                    <option value=\"CO\">Colombia</option>\r\n                                    <option value=\"CR\">Costa Rica</option>\r\n                                    <option value=\"ES\">España</option>\r\n                                    <option value=\"US\">Estados Unidos</option>\r\n                                    <option value=\"MX\">México</option>\r\n                                    <option value=\"PE\">Perú</option>\r\n                                </select>\r\n                                <label htmlFor=\"pais\">País</label>\r\n                            </div>\r\n                            <div className=\"input-field col s12 m8 l4 offset-2 buscador\">\r\n                                <button type=\"submit\" className=\"waves-effect waves-light btn-large yellow accent-4\">BUSCAR</button>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nClimaForm.propTypes = {\r\n    consultarClima: PropTypes.func.isRequired\r\n}\r\n\r\nexport default ClimaForm;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Clima extends Component {\r\n\r\n    mostrarResultado = () => {\r\n        const {name, weather, main} = this.props.result;\r\n        if(!name) return;\r\n        const kelvin = 273.15;\r\n        const urlIcon = `http://openweathermap.org/img/w/${weather[0].icon}.png`;\r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"resultado col s12 m8 l6 offset-m2 offset-l3\">\r\n                    <div className=\"card-panel light-blue align-center\">\r\n                        <span className=\"white-text\">\r\n                            <h2>Resultado de clima de {name}</h2>\r\n                            <p className=\"temperatura\">\r\n                                Actual: {(main.temp - kelvin).toFixed(2)} &deg;C\r\n                                <img src={urlIcon} alr={'Clima de' + name}/>\r\n                            </p>\r\n                            <p>Max. {main.temp_max - kelvin} &deg;C</p>\r\n                            <p>Min. {main.temp_min - kelvin} &deg;C</p>\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                {this.mostrarResultado()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nClima.propTypes = {\r\n    result: PropTypes.object.isRequired\r\n}\r\n\r\nexport default Clima;","import React, { Component } from \"react\";\nimport Header from \"./Header\";\nimport ClimaForm from \"./ClimaForm\";\nimport Clima from \"./Clima\";\n\nclass App extends Component {\n  state = {\n    error: false,\n    query: {},\n    result: {}\n  };\n\n  consultarClima = query => {\n    if (query.ciudad === \"\" || query.pais === \"\") {\n      this.setState({ error: true });\n    } else {\n      this.consultarApi(query);\n    }\n  };\n\n  consultarApi = (query) => {\n    const {ciudad, pais} = query;\n    if(!ciudad || !pais) return;\n    const apiKey = '163afc9d7a66e67287bf34d9bc8c8960';\n    let url = `https://api.openweathermap.org/data/2.5/weather?q=${ciudad},${pais}&appid=${apiKey}`;\n    fetch(url)\n      .then(response => {\n        return response.json();\n      })\n      .then(data => {\n        this.setState({result: data});\n      })\n      .catch(error => {\n        console.log(error);\n      })\n  }\n\n  render() {\n    const error = this.state.error;\n    return (\n      <div className=\"App\">\n        <Header title=\"Clima\" />\n        <ClimaForm consultarClima={this.consultarClima} />\n        {error ? \n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col s12 m6 l4 offset-m3 offset-l4\">\n              <div className=\"card-panel red darken-4 error\">\n                Los campos son requeridos\n              </div>\n            </div>\n          </div>\n        </div>\n        : <Clima result={this.state.result}></Clima>\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}